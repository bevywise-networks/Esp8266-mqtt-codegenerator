package com.bevywise.iot.client;
/**
 * CodeGenForESP8266.java 
 *
 * This class can be used to generate code for a single level of JSON string to be sent to any MQTT Server.
 * It supports specifying of Wifi Details , MQTT UserName and Password , Client_ID , topic and the duration between each push. 
 * The reading of data from the GPIO pins shoud be added to the generated code. 
 * The code can be updaetd with the GPIO reading and can be used in the automatic update of the Source into multiple ESPs in a automated fashion.  
 *
 * @author      Ranjith Kumar DSM 
 * @version     %I%, %G%
 * @since       1.0
 * 
 */

import java.io.FileOutputStream;
import java.util.Scanner;
import java.io.InputStreamReader;
import java.util.UUID;

public class CodeGenForESP8266 { 


    /*
     * This method genereates the ESPIncludes.h which will be included into the ESPMain.cpp 
     * The header files are fixed. But this method is provided in case you need to 
     * add additional header for the implementation.
     */

    public void generateHeader() throws Exception {

	StringBuffer code = new StringBuffer();
	code.append("#include <instrumentation.h>");
	code.append("\n");
	code.append("#include <ArduinoJson.h>");
	FileOutputStream f = new FileOutputStream("ESPIncludes.h");
	f.write(code.toString().getBytes());
	f.close();
    }

    String mqtt_server = "http://devicemanager.bevywise.com";
    String mqtt_port = "1883";

    /**
     * The method is to set MQTTServerDetails for the code generation.
     * The default server is http://devicemanager.bevywise.com & port 1883
     * @param mqtt_server - The MQTT Server to which the client should communicate.
     * @param mqtt_port - The port at which the MQTT Server is running. 
     * 
     */
    public void setMQTTServerDetails(String mqtt_server , String mqtt_port) { 
		
	if(mqtt_server != null &&  mqtt_server.length() >0)  { 
	    System.out.println("inside the mqttserver"+mqtt_server);
	    this.mqtt_server = mqtt_server;
	}	
		
	if(mqtt_port != null &&  mqtt_port.length() >0)  { 
		
	    this.mqtt_port = mqtt_port;
	}
    }


    String wifi_SSID = null;
    String wifi_password = null;

  /**
     * This method will be used to set the local access point credentials through which the client will communicate to mqtt server. 
     * You can leave this as emptyu and set it on initialization using reset mode. This can be left empty, if you are connecting via GSM.
     * @param wifi_SSID - The Access Point name.
     * @param wifi_password - The password of the Access Point.
     * 
     */
    
    public void setWifiDetails(String wifi_SSID , String wifi_password) { 

	this.wifi_SSID = wifi_SSID;
	this.wifi_password = wifi_password;
    }


    String mqtt_username = null;
    String mqtt_password = null;
  /**
     * This method helps you set the MQTT Device authentication credentials into the client. If this is not set during the code generation, you can set it using the reset mode.
     * @param mqtt_username  - The MQTT Username to connect the client to the mqtt server. 
     * @param mqtt_password - The MQTT Password to be used to connect the client. 
     * 
     */
    
    public void setDeviceAuthentication(String mqtt_username , String mqtt_password) {

	this.mqtt_username = mqtt_username;
	this.mqtt_password = mqtt_password;
    }


    String[] datatype = null;
    String[] data_params = null;
    /**
     * The data params can be set using this method The parameter type supported are int , float and boolean. 
     * @param datatype - The array of the data types in order
     * @param data_params - The list of param names. 
     * 
     */
    
    public void setDataParams(String[] datatype , String[] data_params) throws Exception { 

	if(data_params.length != datatype.length) { 
	    new Exception("Count Mismatch between the data type and params");	
	}

	this.datatype= datatype;
	this.data_params = data_params;
    }

    // The Client_id is autogenerated if you want you can overwrite it. 
    String client_id = UUID.randomUUID().toString();
   /**
     * This method will allow you to set the unique client id to the generated agent.  
     * If the client id is not given, the class will generate an Unique random UUID string. 
     * @param client_id  - The unique Client id should be given. 
     */
    
    public void setClient_id(String client_id) { 

	if (client_id != null &&  client_id.length() >0)  { 
	    this.client_id = client_id;
	}
    }


    String topic = "/bevywise/topic";
    /**
     * This method is used to set the topic name of the mqtt message which is used for publishing the data. 
     * @param topic - the name of the topic. 
     * 
     */
    public void setTopic(String topic) {

	if(topic != null & topic.length > 0 ) { 
	
	    this.topic = topic;
	}
    }


      /**
     * This method will generate the code for the main cpp file. 
     * 
     */
    
    public void generateCPP() throws Exception { 

	StringBuffer code = new StringBuffer();

	code.append("\nchar data[100];");
	code.append("\nint buttonpin=4;");
	code.append("\n");

	for(int i = 0 ; i < datatype.length; i++) { 
	    code.append(datatype[i]);
	    code.append(" ");
	    code.append(data_params[i]); 
	    code.append(";");
	    code.append("\n");
	}

	code.append("\nconst char* WIFI_SSID = \""+wifi_SSID+"\";");
	code.append("//set this by pressing Push Button switch");
	code.append("\nconst char* WIFI_PASSWORD = \""+wifi_password+"\";");
	code.append("//set this by pressing Push Button switch");

	code.append("\nconst  char* CLIENT_ID = \""+client_id+"\";");
	code.append("//define your client Id here");
	code.append("\nconst  char* mqtt_server = \""+mqtt_server+"\";");
	code.append("//set this by pressing Push Button switch");

	code.append("\nconst char* mqtt_port  = \""+mqtt_port+"\";");
	code.append("//set this by pressing Push Button switch");

	code.append("\nconst char* user_name = \""+mqtt_username+"\";");
	code.append("//set this by pressing Push Button switch");

	code.append("\nconst char* pass_word = \""+mqtt_password+"\";");
	code.append("//set this by pressing Push Button switch");

	code.append("\nconst char* topic = \""+topic+"\";");
	code.append("//define your topic here");
	code.append("\nconst int sleepTimeS = 10;");
	code.append("\nStatic JsonBuffer<200> jsonBuffer;");
	code.append("\nJsonObject& root =jsonBuffer.createObject();");

	code.append("\n void setup()");
	code.append("\n{");
	code.append("\nSerial.begin(115200);");

	code.append("\n}");
	code.append("\nvoid loop()");
	code.append("\n{");
	code.append("\n//Include the code for reading sensor data and conversion");
	code.append("\n");

	for(int i = 0 ; i < datatype.length; i++) { 
	    code.append("root[\""+data_params[i]);
	    code.append("\"]");
	    code.append("=(String)"+data_params[i]); 
	    code.append(";");
	    code.append("\n");
	}
	code.append("\n root.printTo(data, root.measureLength() + 1);");
	code.append("\nsetdata(data,buttonpin,WIFI_SSID,WIFI_PASSWORD,mqtt_server,mqtt_port,user_name,pass_word,CLIENT_ID,topic);");
	code.append("\nsenddata(data,mqtt_server,mqtt_port,user_name,pass_word,CLIENT_ID,topic);");
	code.append("\nESP.deepSleep(sleepTimeS * 1000000);");
	code.append("\n}");


	FileOutputStream f = new FileOutputStream("ESPmain.cpp");
	f.write(code.toString().getBytes());
	f.close();

    }


      /**
     * This method will help in getting the values form the command prompt. 
     * @param topic - the name of the topic. 
     * 
     */
    public String getValueFromCommandLine(String toPrint) throws Exception { 

	Scanner scanner = new Scanner(new InputStreamReader(System.in));
	System.out.println(toPrint);
	String input = scanner.nextLine();
	return input;
    }


    public static void main(String[] args) {

	try { 
	    CodeGenForESP8266 esp = new CodeGenForESP8266();	
	    esp.setClient_id(esp.getValueFromCommandLine("Enter Unique Client_id for the MQTT Client (AutoGenerated if not given)"));
	    esp.setDeviceAuthentication(esp.getValueFromCommandLine("Enter MQTT Device Username for Authentication (Mandatory):"), esp.getValueFromCommandLine("Enter MQTT Device Username for Authentication (Mandatory):"));
	    esp.setWifiDetails(esp.getValueFromCommandLine("Enter Your Wifi Acccess Point Name"), esp.getValueFromCommandLine("Enter your Wifi Password  (Mandatory):"));
	    esp.setMQTTServerDetails(esp.getValueFromCommandLine("Enter the MQTT Server:[https://devicemanager.bevywise.com]"), esp.getValueFromCommandLine("Enter the MQTT Server Port:[1883]"));
			
	    int count = Integer.parseInt(esp.getValueFromCommandLine("Get the number of parameters (Enter numeric value between 1 and 9)  (Mandatory):" ));
	    System.out.println("The count is "+count);
	    String[] datatype = new String[count];
	    String[] dataparams = new String[count];
	    for(int i = 0 ; i < count ; i++) {
		datatype[i] = esp.getValueFromCommandLine("Enter Data type for the parameter "+ (i+1) +": ( int , float, boolean , String) (Mandatory):");
		dataparams[i] = esp.getValueFromCommandLine("Enter name of the parameter "+ (i+1)+" (Mandatory)" );
	    }
	    esp.setDataParams(datatype , dataparams);

	    esp.setTopic(esp.getValueFromCommandLine("Enter the Topic to which the data should be published (Mandatory):"));
	    esp.generateHeader();
	    esp.generateCPP();
	    //esp.generateCPP(args[1]);
	}
	catch (Exception exp){
	    exp.printStackTrace();
	}
    }


}
